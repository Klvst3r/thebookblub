Creaci√≥n de Formularios con ActiveForm y Smarty en PHP

Resumen
--------


¬øC√≥mo crear un controlador y una vista en Smarty para gestionar formularios?

Crear formularios en proyectos web puede ser una tarea complicada, pero gracias a las herramientas y frameworks adecuados, este proceso se simplifica notablemente. En este apartado, se incluye una gu√≠a paso a paso para manejar controladores y vistas utilizando Smarty y widgets. Es vital recordar que cada etapa es crucial para lograr que el formulario no solo funcione, sino tambi√©n para que sea atractivo y f√°cil de usar.
¬øC√≥mo implementar un formulario b√°sico con Active Form?

Un formulario necesita tener, al menos, campos para recogida de datos y un bot√≥n de env√≠o. Utilizar Active Form a trav√©s de Smarty hace que la implementaci√≥n sea m√°s sencilla y eficaz.

<!-- Llamamos a la clase Active Form -->
{use class="G.widgets.ActiveForm" type="block"}

<!-- Se crea el formulario con el ID `new_user` -->
{$form | ActiveForm id="new_user" assign="form"}

<!-- Campo de texto para el nombre de usuario -->
{$form->field('user', 'username')}

<!-- Campo para la contrase√±a, con entrada oculta -->
{$form->field('user', 'password')->input('password')}

<!-- Campo para repetir la contrase√±a, como retrospectiva y para validaci√≥n -->
{$form->field('user', 'password_repeat')->input('password')}

<!-- Biograf√≠a del usuario, como un textarea -->
{$form->field('user', 'bio')->textarea()}

<!-- Bot√≥n para enviar el formulario -->
<input type="submit" value="Guardar">

El c√≥digo muestra c√≥mo establecer un formulario con campos para el nombre de usuario, contrase√±a, repetici√≥n de contrase√±a (para validaci√≥n futura) y biograf√≠a con un textarea.
¬øC√≥mo gestionar los datos del formulario en el servidor?

Una parte clave es c√≥mo manejar eficientemente los datos que se obtienen del formulario. En el script, podemos observar que al crear un nuevo controlador para el usuario, los datos son capturados y procesados. Esto se hace utilizando la l√≥gica de negocio que corresponde al controlador, y se simplifica el proceso usando Active Form en las vistas.

Adicionalmente, al implementar la validaci√≥n en futuros pasos, se asegura la integridad de los datos y se protege el sistema, ya que errores como el ingreso de contrase√±as incorrectas con el campo password_repeat son capturados antes de proceder al almacenamiento de la base de datos.
¬øC√≥mo asegurar que el formulario solo se pueda usar sin estar logueado?

Algo importante que agregar es la validaci√≥n de usuario. El formulario no deber√≠a estar disponible para usuarios autenticados, pues estos no deber√≠an crear m√∫ltiples cuentas. Para ello, se implementa una l√≥gica dentro del controlador:

if (!G.App.User.isGuest()) {
    G.App.Session.setFlash('warning', 'No puedes crear usuario estando logueado.');
    return this.goHome();
}

Esta condici√≥n revisa si un usuario est√° logueado antes de permitirle el acceso a la creaci√≥n de una nueva cuenta. Si el usuario est√° logueado, recibe un mensaje de alerta y es redirigido a la p√°gina principal, asegurando as√≠ que las funciones del formulario se mantengan adecuadamente restringidas a los visitantes.
¬øQu√© sigue despu√©s de crear un formulario b√°sico?

Con el controlador y la vista en marcha, el siguiente paso es gestionar las validaciones y reglas de negocio. Es crucial implementar un sistema donde se verifique que:

    El nombre de usuario es √∫nico.
    Las contrase√±as coinciden.
    Los datos cumplen con ciertos criterios de validaci√≥n.
    Los permisos de guardado de datos est√°n correctamente configurados.

Adem√°s, la implementaci√≥n de estas funcionalidades garantizar√° que las acciones del usuario se procesen, almacenen y utilicen de manera adecuada.


Referencias:
------------

https://www.yiiframework.com/doc/api/2.0/yii-widgets-activeform

https://www.yiiframework.com/doc/guide/2.0/es/start-forms


Comentarios:
------------

Este widget ActiveForm es practico para crear rapidamente un formulario con sus elementos.

Me trae recuerdos del pasado, en el framework (cuyo nombre no dire, pero que tenemos como referencia) existia algo llamado laravelcollective

Usaba el mismo concepto para crear formulario y sus elementos:

Form::label('email', 'E-Mail Address');

Form::submit('Guardar');

Lo dejaron de usar varias versiones atras no se la razon, pero recuerdo que cuando se le querian poner estilos (Para ajustarlo a una UI especifica y tener una buena UX) era un dolor de cabeza. 



Procedimiento:
------------

Ya tenemos la accion en el controldor, y dentro de toda la logica de operaci√≥n que hay, regresamos a imprimir renderear un template que se llama new.tpl-

public function actionNew(){
        $user = new User;

        if($user->load(Yii::$app->request->post())){
            //Hay algo en POST que es para mi.
            if($user->validate()){
                //Lo que cargue valido bien
                if($user->save()){
                    //Lo que vlide se salvo en la BD
                    Yii::$app->session->setFlash("success", 'usuasrio guardado correctamente');
                    return $this->redirect(['site/login']);
                }else{
                    throw new Exception("Error al salvar el usuario");
                    return;
                }
            }

        }

        return $this->render('new.tpl', ['user' => $user]);
    }


Que esta en el controlador de User, vamos acrear ese controlador.

en views/ creamos una nueva carpeta que se llama user 

views/user/new.tpl

Al intentar renderizar la vista no marca nada ni error y tampoco muestra contenido del template de smarty por lo que procedemos a verificar que esta corrriendo corretamente smarty:


 Verifica que realmente est√°s usando Smarty con Yii2

La forma correcta de integrar Smarty con Yii2 es mediante la extensi√≥n oficial de Yii:

yiisoft/yii2-smarty

Instalaci√≥n con Composer (si no lo has hecho):

composer require yiisoft/yii2-smarty

‚úÖ 1. Configura Smarty como motor de plantillas en Yii2

En el archivo config/web.php o main.php, aseg√∫rate de tener lo siguiente:

'components' => [
    'view' => [
        'renderers' => [
            'tpl' => [
                'class' => 'yii\smarty\ViewRenderer',
                // opcional: especificar rutas de Smarty si quieres
                // 'cachePath' => '@runtime/Smarty/cache',
                // 'compilePath' => '@runtime/Smarty/compiled',
            ],
        ],
    ],
],

Esto le dice a Yii que los archivos .tpl deben ser renderizados usando Smarty.
‚úÖ 2. Estructura del archivo de vista

Tu archivo debe estar en:

/views/user/new.tpl

Y contener simplemente:

Hola.

‚úÖ 3. Controlador

El m√©todo del controlador UserController debe verse as√≠:

public function actionNew()
{
    return $this->render('new.tpl');
}

‚ö†Ô∏è Es crucial incluir la extensi√≥n .tpl cuando usas renderers personalizados en Yii2.
‚úÖ 4. Verifica que Smarty est√© funcionando

Si no ves nada en la vista, activa el modo debug en index.php:

defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

Y revisa el archivo de log en:

/runtime/logs/app.log

All√≠ ver√°s si hay errores al cargar la vista.
‚úÖ 5. Limpieza y permisos

    Aseg√∫rate de que las carpetas /runtime/Smarty/cache/ y /runtime/Smarty/compiled/ tengan permisos de escritura.

    Borra los archivos en runtime/cache y runtime/Smarty/ si persisten errores.

Estabamos usando

 'view' => [
            'class' => 'yii\web\View',
            'renderers' => [
                'tpl' => [
                    //'class' => 'app\components\SmartyRenderer',
                      'class' => 'yii\smarty\ViewRenderer',
                ],
            ],
        ],


 No vamos a usar app\components\SmartyRenderer a menos que hayamos escrito escrito esa clase manualmente.

 aunque SmartyRenderer esta extendiendo correctamente 


      de yii\smarty\ViewRenderer.

    Est√°s registrando Html como clase dentro de Smarty.

    No parece haber errores graves en esa clase.

Sin embargo, si no te est√° mostrando absolutamente nada en la vista, el problema probablemente est√° en uno de estos puntos cr√≠ticos:

Vamos a verificar que la plantilla este en la ruta correcta

Verificamos finalemnte que funcione el archivo .tpl


 Lista de verificaci√≥n final para que funcione tu archivo .tpl
‚úÖ 1. Aseg√∫rate de que la plantilla est√© en la ruta correcta:

views/user/new.tpl

Contenido m√≠nimo:

Hola.

‚úÖ 2. En tu controlador (UserController):

public function actionNew()
{
    return $this->render('new.tpl');
}

‚úÖ 3. Aseg√∫rate de tener instalada la librer√≠a de Smarty:

composer show smarty/smarty

Si no aparece, inst√°lala:

composer require smarty/smarty

‚úÖ 4. Smarty debe poder escribir en los directorios de cach√©

Crea y da permisos a las carpetas necesarias si no existen:

mkdir -p runtime/Smarty/cache
mkdir -p runtime/Smarty/compiled
chmod -R 775 runtime/Smarty

‚úÖ 5. Verifica si hay errores en los logs

Abre:

runtime/logs/app.log

O activa errores en index.php (por si algo se est√° ocultando):

defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

üß™ Prueba m√≠nima desde cero

Si quieres probar con una plantilla completamente limpia para verificar que Smarty est√© funcionando:
Archivo: views/user/new.tpl

<h1>Hola desde Smarty</h1>

Controlador:

public function actionNew()
{
    return $this->render('new.tpl', [
        'mensaje' => 'Smarty funcionando correctamente',
    ]);
}

Y en new.tpl puedes probar tambi√©n:

<h1>{$mensaje}</h1>

‚úÖ Si despu√©s de todo esto a√∫n no aparece nada

    Cambia temporalmente la clase en web.php a la nativa:

'view' => [
    'renderers' => [
        'tpl' => [
            'class' => 'yii\smarty\ViewRenderer',
        ],
    ],
],

    Elimina app\components\SmartyRenderer.php de la configuraci√≥n para aislar el problema.


Solucion aplicada
------------------

Parece que ya se puede renderizar correctamente

 Lista de verificaci√≥n final para que funcione tu archivo .tpl
‚úÖ 1. Aseg√∫rate de que la plantilla est√© en la ruta correcta:

views/user/new.tpl

Contenido m√≠nimo:

Hola.

‚úÖ 2. En tu controlador (UserController):

public function actionNew()
{
    return $this->render('new.tpl');
}

‚úÖ 3. Aseg√∫rate de tener instalada la librer√≠a de Smarty:

composer show smarty/smarty

Si no aparece, inst√°lala:

composer require smarty/smarty

‚úÖ 4. Smarty debe poder escribir en los directorios de cach√©

Crea y da permisos a las carpetas necesarias si no existen:

mkdir -p runtime/Smarty/cache
mkdir -p runtime/Smarty/compiled
chmod -R 775 runtime/Smarty

‚úÖ 5. Verifica si hay errores en los logs

Abre:

runtime/logs/app.log

O activa errores en index.php (por si algo se est√° ocultando):

defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

üß™ Prueba m√≠nima desde cero

Si quieres probar con una plantilla completamente limpia para verificar que Smarty est√© funcionando:
Archivo: views/user/new.tpl

<h1>Hola desde Smarty</h1>

Controlador:

public function actionNew()
{
    return $this->render('new.tpl', [
        'mensaje' => 'Smarty funcionando correctamente',
    ]);
}

Y en new.tpl puedes probar tambi√©n:

<h1>{$mensaje}</h1>

‚úÖ Si despu√©s de todo esto a√∫n no aparece nada

    Cambia temporalmente la clase en web.php a la nativa:

'view' => [
    'renderers' => [
        'tpl' => [
            'class' => 'yii\smarty\ViewRenderer',
        ],
    ],
],

    Elimina app\components\SmartyRenderer.php de la configuraci√≥n para aislar el problema.

Parece wue el renderizado con la plantilla web.tpl funciona correctamente.


Ahora ya vemos que se imprime el hola, sobre este vamos a trabajar.

Yii tiene un concepto realmente interesante que son los widgets que es codigo reusable desde diferentes puntos de la vista, no importa si es con smarty o no es con smarty o php directamente.

Vamos a trabajar con algo potente 

activeform
----------

Vamos a involuvrar en smarty

{use class="yii\widgets\ActiveForm" type="block"}

{ActiveForm id="new-user" assign="form"}
    {$form->field($user, 'username')}
{/ActiveForm}

Crea el form type metod id etc, se puede hacer de forma muy sencilla que es con el acive form, 

el id sirve despues para que con Js, con cualquier libreria tiene jQuery instalado y se puede acceder directamente, y assign = form

cerrams para eviatr errores.

El assign form significa que lo que estamos creando a partir de ahora va a estar guardado en un avariable que se llama form, es directorio
si quiero hacerun campo

{$form->field($user, 'username')}

Es decir queremos hacer un campo, el modelo que vamos autilizar con $user, un string con el nombre del atributo que queremos tratar ahi, que es username.


Debe de visualizarse ya en el formulario como un campo viible, donde podemos escribir. 


Seguramente nos dara error y os vamos a anticipar a ello por que.


Codigo correcto
---------------
En Yii2 con Smarty, la l√≥gica del formulario y la asignaci√≥n de variables debe manejarse principalmente desde el controlador, y la vista (.tpl) solo deber√≠a encargarse de mostrar el contenido.

Vamos paso a paso a estructurarlo correctamente para que podamos generar un formulario de creaci√≥n de usuario (User) en Yii2 con Smarty.

1. Controlador: UserController.php

Aqu√≠ vamos a preparar el modelo y el formulario para enviarlo a la vista:

use Yii;
use app\models\User;
use yii\web\Controller;
use yii\widgets\ActiveForm;

class UserController extends Controller
{
    public function actionNew()
    {
        $user = new User();

        // Este fragmento es √∫til si vas a procesar el formulario tambi√©n desde aqu√≠.
        if ($this->request->isPost && $user->load(Yii::$app->request->post()) && $user->save()) {
            return $this->redirect(['view', 'id' => $user->id]);
        }

        return $this->render('new.tpl', [
            'user' => $user,
        ]);
    }
}

Quedando nuestro controlador integrado de la siguiente manera:



<?php

namespace app\controllers;


use Yii; //Objeto principal de la palicaci√≥n

use yii\web\Controller;

use app\models\User;

use Exception;

use yii\web\HttpException;

use yii\widgets\ActiveForm;



class UserController extends controller {

    public function actionNew()
    {
        $user = new User;

        if ($user->load(Yii::$app->request->post())) {
            // Hay algo en POST para este modelo
            if ($user->validate()) {
                // Validaci√≥n exitosa
                if ($user->save()) {
                    Yii::$app->session->setFlash("success", 'Usuario guardado correctamente');
                    return $this->redirect(['site/login']);
                } else {
                    throw new HttpException(500, "Error al salvar el usuario.");
                }
            }
            // Si no pasa la validaci√≥n, caer√° a la vista para mostrar errores
        }

        //return $this->render('new.tpl', ['user' => $user]);
        //return $this->render('new.tpl');
        //return $this->render('new', ['user' => $user]);

        return $this->render('new.tpl', [
            'user' => $user
        ]);
    }

}


¬øQu√© cambia?

    Estamos enviando el modelo $user a nuestra vista new.tpl, como lo espera el formulario {ActiveForm} para poder acceder a $form->field($user, 'atributo').

    Manejamos la excepci√≥n de forma m√°s espec√≠fica con HttpException.




2. En la Vista: views/user/new.tpl

El archivo .tpl debe ser limpio, solo con la l√≥gica de presentaci√≥n. Aqu√≠ est√° un ejemplo b√°sico del formulario usando la extensi√≥n Smarty para Yii:

{use class="yii\widgets\ActiveForm" type="block"}
{use class="yii\helpers\Html"}

<h1>Registrar nuevo usuario</h1>

{ActiveForm begin id="new-user" options=['method' => 'post'] assign="form"}

    <div class="form-group">
        {$form->field($user, 'username')}
    </div>

    <div class="form-group">
        {$form->field($user, 'email')}
    </div>

    <div class="form-group">
        {$form->field($user, 'password')->passwordInput()}
    </div>

    <div class="form-group">
        {Html::submitButton('Guardar', ['class' => 'btn btn-primary'])}
    </div>

{ActiveForm end}



Vamos a utilizar la siguiente vista para construir el formulario de registrando
-------------------------------

{use class="yii\widgets\ActiveForm" type="block"}
{use class="yii\helpers\Html"}

<h1>Registrar nuevo usuario</h1>

{ActiveForm begin id="new-user" options=['method' => 'post'] assign="form"}

    <div class="form-group">
        {$form->field($user, 'username')}
    </div>

    <div class="form-group">
        {$form->field($user, 'email')}
    </div>

    <div class="form-group">
        {$form->field($user, 'password')->passwordInput()}
    </div>

    <div class="form-group">
        {Html::submitButton('Guardar', ['class' => 'btn btn-primary'])}
    </div>

{ActiveForm end}



Iniciamos con el primer campo
----------------------------

{use class="yii\widgets\ActiveForm" type="block"}
{use class="yii\helpers\Html"}

<h1>Registrar nuevo usuario</h1>

{ActiveForm begin id="new-user" options=['method' => 'post'] assign="form"}

    <div class="form-group">
        {$form->field($user, 'username')}
    </div>


{ActiveForm end}






Notas importantes:

        Smarty reconoce los bloques de clases Yii con {use}.

        Usamos assign="form" en {ActiveForm begin} para usar $form en los campos.

        No necesitamos inicializar nada de Smarty a mano en este caso si ya est√° configurado el ViewRenderer.


3. Configuraci√≥n: config/web.php

Tu configuraci√≥n se ve casi correcta, pero aseg√∫rate que yii\smarty\ViewRenderer est√° bien cargado:

'view' => [
    'class' => 'yii\web\View',
    'renderers' => [
        'tpl' => [
            'class' => 'yii\smarty\ViewRenderer',
            'cachePath' => '@runtime/Smarty/cache',
        ],
    ],
],

Y si quieres usar una clase personalizada (SmartyRenderer), aseg√∫rate de extender correctamente:


De momento este codigo sifuiente no lo utilizamos



namespace app\components;

use yii\smarty\ViewRenderer;

class SmartyRenderer extends ViewRenderer
{
    public function init()
    {
        parent::init();
        // Puedes registrar clases aqu√≠ si lo necesitas
    }
}

‚úÖ 4. Enlace en navegador

Accede en el navegador:

http://localhost:7000/user/new

Y se deber√≠a renderizar tu formulario correctamente.



Modelos en PHP

    Creaci√≥n y manipulaci√≥n de Datos



Los modelos van dentro de la carpeta models


En el caso de los modelos, los nombres de los archivos sera en singular, por que cada vez que instanciemos un objeto va a ser un libro, no sera libros.


Se tiene un modelo, hasta ahora n se habla d ela conexi√≥n a la base de datos, es una instancia que esta sola en si misma.

Solo es el contenedor de informaci√≥n.

S le dan dos atributos.

title
author

Ahora e el controladores

Se abre el archivo, iteramos sobre las lineas del archiovo se traen en un arreglo.

se crea algo nuevo 

    $book = new Book



¬øQu√© es un modelo en programaci√≥n?

Un modelo es fundamental en la programaci√≥n, especialmente al tratar con aplicaciones web y bases de datos. Se le describe como un paquete de transporte de datos, reglas de negocio, l√≥gica de negocio y validaci√≥n. Es considerado el coraz√≥n de una aplicaci√≥n, ya que centraliza toda la l√≥gica y maneja la interacci√≥n con otros componentes del sistema.

Los modelos permiten encapsular datos en objetos, siendo cada objeto una representaci√≥n directa de una estructura que manejamos dentro de nuestra l√≥gica de negocio. Esto facilita el manejo y procesamiento de datos de manera sistem√°tica y organizada.
¬øC√≥mo se relacionan los modelos y controladores?

La integraci√≥n de modelos con controladores es crucial para el flujo de una aplicaci√≥n web. En un entorno de programaci√≥n como PHP, los modelos est√°n com√∫nmente almacenados en una carpeta especial, indicada para su manejo espec√≠fico. Al crear un modelo, como un libro Book.php, se establece una estructura base para el manejo espec√≠fico de datos.

A continuaci√≥n, se muestra un ejemplo simple usando PHP:

<?php

namespace app\models;

use yii\base\Model;

class Book extends Model
{
    public $title;
    public $author;
}

Este c√≥digo define un modelo de libro con dos atributos: title y author. Sin embargo, dicho modelo no conecta ni almacena datos directamente en bases de datos u otros recursos; su rol es puramente organizativo para manejar datos en la aplicaci√≥n.
¬øC√≥mo se instancian y utilizan los modelos?

Al integrar modelos en la l√≥gica de una aplicaci√≥n, es importante entender c√≥mo se instancian y utilizan:

    Instanciaci√≥n del modelo: Crear una instancia de un modelo permite manejar datos espec√≠ficos sobre ese objeto, por ejemplo:

    $book = new Book();
    $book->title = '1984';
    $book->author = 'George Orwell';

    Integraci√≥n con controladores: Los controladores, al manejar la l√≥gica de acciones de la aplicaci√≥n, como la manipulaci√≥n y visualizaci√≥n de datos, interact√∫an estrechamente con los modelos.

        Controlador de ejemplo:

        use app\models\Book;

        $book = new Book();
        $book->title = $data[0];
        $book->author = $data[2];

        echo $book->toString();

En el c√≥digo anterior, toString() imprime una representaci√≥n del objeto Book, separando claramente la l√≥gica de datos de la presentaci√≥n, fomentando un dise√±o limpio y eficiente.
¬øQu√© buenas pr√°cticas aplicar al usar modelos?

Al implementar modelos, es esencial seguir ciertas pr√°cticas que mejoren el mantenimiento y comprensi√≥n del c√≥digo:

    Nombres Concisos: Nombrar modelos en singular, como "Book" en lugar de "Books", ayuda a que los objetos instanciados representen individualmente una entidad espec√≠fica.

    Espaciado de Nombres (Namespaces): Utilizar espaciados de nombres es crucial para evitar conflictos y organizar mejor las clases en una aplicaci√≥n. Esto ayuda a modularizar y mantener el c√≥digo.

    Validaci√≥n y L√≥gica: Los modelos no solo transportan datos, sino que tambi√©n pueden incluir l√≥gica de validaci√≥n, gestionando tanto la entrada como la salida de informaci√≥n.

    Funciones privadas: Permite encapsular l√≥gicas auxiliares espec√≠ficas a nivel de modelo sin exponerlas fuera de su contexto. Por ejemplo, manipular t√≠tulos antes de mostrarlos:

    private function quick(Book $book)
    {
        $book->title = sprintf('%s %s', $book->title, 'Extra Info');
        return $book;
    }

Los modelos son una pieza clave en estructurar una aplicaci√≥n robusta y eficiente. Su correcta implementaci√≥n no solo organiza el c√≥digo, sino que tambi√©n mejora significativamente la mantenibilidad y el flujo de datos a trav√©s de las distintas capas de nuestra aplicaci√≥n. 



Generar informaci√≥n a partir de datos separados. üî•

Relacionar datos separados (generar asociaciones) para ofrecerle al usuario informaci√≥n para tomar decisiones.


La funci√≥n fgetcsv() devuelve un array que contiene un null ([null]) cuando se encuentra con una l√≠nea vac√≠a, como dice la documentaci√≥n de PHP (https://www.php.net/manual/es/function.fgetcsv.php). Entonces podemos reducir el condicional a:

!empty($data[0])





Comentarios:
    "El Modelo es el coraz√≥n de nuestra aplicaci√≥n." para que no queden dudas.


Archivos:
book.php
---
    <?php

namespace app\models;

use yii\db\Model;

class Book extends Model {
  public $title; 
  public $author;

  public function toString () {
    return sprintf("%s - %s", $this->title, $this->author);
  }
}



klvst3rcontroller.php
------------
<?php

namespace app\commands;

use yii\console\Controller;
use yii\console\ExitCode;

use app\models\Book;

/**
 * Comando para clase, de prueba
 */
class PlatziController extends Controller {

  /**
   * Suma los valores de los dos par√É¬°metros
   */
  public function actionSuma($a, $b = 17) {
    $result = $a + $b;
    printf("%0.2f\n", $result);
    return ExitCode::OK;
  }

  private function quick($book) {
    $book->title = sprintf("%sffff", $book->title);
    return $book;
  }

  public function actionBooks ($file) {
    $f=fopen√Ø¬ºÀÜ$file√Ø¬º≈í "r"√Ø¬º‚Ä∞√Ø¬º‚Ä∫
    while(! feof($f)) {
      $data = fgetcsv($f);
      if !empty($data[1]) && !empty($data[2])) {
      $book = new Book;
      $book->title = $data[1];
      $book->author = $data[2];
      $book = $this->quick($book);|
      printf("%s\n", $book->toString());
      }
    fclose($f);
    return ExitCode::OK;
    √Ø¬Ω¬ù
  √Ø¬Ω¬ù




Referencias:

    https://www.yiiframework.com/doc/guide/2.0/es/structure-models



contexto de desarrollo


1. Se crea el modelo:


<?php

namespace app\models;

use yii\base\Model;


class Book extends Model
{
    public $title;
    public $author;
    
     public function toString() {
        return sprintf("%s - %s", $this->title, $this->author);
    }
}


2. Se modifica el controladores
 public function actionBooks ($file) {
        $f=fopen($file, "r");
        while(!feof($f)) {
          $data = fgetcsv($f);
          //print_r($data);
          //Se crea un nuevo book
          $book = new Book;

          $book->title = $data[0];
          $book->author = $data[2];

          printf("%s\n", $book->toString());
        }
        fclose($f);
        return ExitCode::OK;
    }
    

3. Se ejecuta en la termina.
    php yii klvst3r/books local/books.csv


aunque la ejecuci√≥n se realiza es importante que se corrijan los errores.

Por ello se modificar el filrado del controlador.

public function actionBooks ($file) {
        $f=fopen($file, "r");
        while(!feof($f)) {
          $data = fgetcsv($f);

          //si existen elementos vacios se filtra mediante un if
          if(!empty($data[1]) && !empty($data[2])) {
            //print_r($data);
            //Se crea un nuevo book
            $book = new Book;

            $book->title = $data[1];
            $book->author = $data[2];

            printf("%s\n", $book->toString());
          } 

          
        }
        fclose($f);
        return ExitCode::OK;
    }

Para filtrar aquellos que no estan vacios en el campo title

con esto se filtra el archivo, si se puede leer, en el modelo ya se tiene un forma diferente diferente de traer los datos que se estan trayendo, ahora si tengo el titulo y el author


Lo que tenemos son dos datos seperados y con el modelo estamos generando informaci√≥n.


Con esto ayuda a crear asociasiones, que van a ofrecer al usuario final de como actuar o tomar decisiones.

un modelo es un paquete de transporte de datos, los asociamos, los enviamos, los procesamos, se los regresamos a alguien mas pero siempre va a empquetado.


Ej.

En el controlador definimos:

private function quick($book) {
        $book->title = sprintf("#sffff", $book-> title);
        return $book;
      }


Lo que esta haciendo es recbir un objeto, que es un modelo libro, lo a a recibir, lo va a transformar, y lo vaa regresar.

Entonces.

            //Regresamos invocamos a la funcion quick y despues lo imprime
            $book = $this->quick($book);


ahora ejecutamos

    php yii klvst3r/books ocal/books.csv


con este ejemplo cada titulo del archivo tiene una edici√≥n agregando fff al final, lo regreso modificado.


Cone sto es ejemplificar que un modelo su gran responsabilidaddes, es empaquetar los datos para generar informaci√≥n y traspasarse, sin mayor mutacion entrediferentes elementos en el sistema.



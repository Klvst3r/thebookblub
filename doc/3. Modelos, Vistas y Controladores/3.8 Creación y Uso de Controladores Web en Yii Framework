Creación y Uso de Controladores Web en Yii Framework


Resumen
¿Qué son los controladores web en un framework?

Cuando se desarrolla una aplicación web, los controladores web son fundamentales. Permiten que la aplicación responda a las solicitudes de los navegadores, transformando los requisitos del usuario en respuestas claras y significativas. Comparados con los controladores de consola, estos controladores devuelven cadenas de texto, que pueden ser tan simples como un "OK" o tan complejas como el HTML de un sitio.
¿Cómo se estructuran los controladores?

A pesar de no haber una regla estricta sobre cómo distribuir los controladores, una práctica común es organizarlos por modelo. Esto facilita la separación de responsabilidades y hace que el código sea más fácil de mantener. Normalmente, se crean controladores para manejar entidades específicas, como libros o autores, y a menudo también se añaden controladores adicionales para funcionalidades especiales como administración y servicios.
¿Cómo crear un controlador en Yii?

El proceso de creación de un controlador en Yii es relativamente sencillo. A continuación se muestra un ejemplo básico de cómo se puede implementar un controlador para gestionar los recursos relacionados con libros en una aplicación, creando un archivo book-controller.php:

<?php

namespace app\controllers;

use Yii\web\Controller;

class BookController extends Controller {
    public function actionAll() {
        return 1;
    }
}

Este fragmento de código crea un controlador que, por el momento, simplemente devuelve un número al ser llamado, demostrando la estructura básica de un controlador en Yii.
¿Cómo funciona el acceso a datos en un controlador?

Los controladores no solo gestionan solicitudes, también interactúan con modelos para obtener, manipular y devolver datos. A continuación, se muestra cómo un controlador puede utilizar el modelo Book para recuperar datos de la base:
¿Cómo serializar datos en PHP?

Para convertir un arreglo de objetos, como una lista de libros, en un string, se puede usar la función serialize() de PHP:

use app\models\Book;

public function actionAll() {
    $books = Book::findAll();
    return serialize($books);
}

Aquí se muestra cómo el controlador devuelve una representación serializada de un conjunto de libros.
¿Cómo manejar detalles específicos o ID?

Para obtener detalles específicos sobre un libro según su ID, se puede implementar una función actionDetail que procese la solicitud y devuelva la información deseada:

public function actionDetail($id) {
    $book = Book::findOne($id);
    if (empty($book)) {
        // Manejo de error pendiente
        return 'Error, libro no encontrado';
    }
    return $book->title;
}

Con esto, se puede acceder a la información específica de un libro mediante el uso de su identificación única.
¿Cómo gestionar errores en Yii?

Yii ofrece un sistema robusto para el manejo de errores, proporcionando información útil directamente en el navegador. Esto permite una depuración más eficiente, identificando claramente dónde surgen los problemas dentro del código:

    Se genera un error intencional al usar un ID inválido para demostrar su gestión.
    Yii proporciona detalles sobre el error, señalando específicamente las líneas de código problemáticas.

Implementar manejo de errores efectivo garantiza que la aplicación proporcione una experiencia de usuario fluida y minimiza tiempos de inactividad.

En resumen, los controladores son las piezas centrales en la estructura de una aplicación web. Con una correcta implementación y manejo de errores, pueden transformar de manera eficiente las solicitudes del usuario en interacciones significativas. 


Referencias:

https://www.yiiframework.com/doc/guide/2.0/es/structure-controllers



Comentarios:


Esta forma de llamar a los métodos del controlador es amada por muchos y odiada por muchos. en Laravel debes definir en un router, como se llama el Controlador y el metodos que vas a llamar con una URL, lo mismo en Angular y React.

Los que defienden el model ode asignación directa lo defienden por lo rapido que es desarrollar, los que defienden el router dicen que es preferible poder cambiar el metodo sin tener que cambiar la url de la api, así no dañas la forma de llegar a tu endopoint.

Ambas formas están bien, no hay forma correcta o incorrecta, depende de lo que necesites


En vez de usar serialize, lo cual se ve desorganizado, es mejor usar JSON.

    public function actionAll()     {        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;        $books = Book::find()->all();        return $books;    }```js public function actionAll() { \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON; $books = Book::find()->all(); return $books; }


![](file:///C:/Users/principal/Downloads/snip.jpg)



 
![](file:///C:/Users/principal/Downloads/snip.jpg)```js
    public function actionAll() 
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $books = Book::find()->all();
        return $books;
    }


Estoy de acuerdo contigo, para devolver los libros como JSON se podria usar algo como esto:

use yii\web\Controller;
use app\models\Books;

class BooksController extends Controller
{
    public function actionIndex()
    {
        // Obtener todos los libros junto con su autor
        $books = Books::find()->with('author')->all();

        // Devolver en formato JSON
        return $this->asJson($books);
    }
}


Procedimiento:


Anteriormente trabajamos con comandos que son controladores para  reques via linea de ocmandos, tienen acceso a todos los recursos, toca el turno a los controladored web, los que utilizaremos mas continuamente.

Los controladores cLI y los controladores web son sumanente similares, casi lo mismo, tienen diferencias.

Los controladores de consola:

    - Regresan un codigo numerico que el SO interpreta como esta bien, faltaron datos, no puedo loguear, el usuario no tiene permisos. y un catalogo extenso

El controller web 

- Devuelve un sing que tiene caracteres como ok, si, nmbre el author o un string tan largo como puede ser el html del sitio que quieras estarviendo.


Dos contorladores se genetara u paraa ahotr y otro para libro.


No hay una regla especifica que dicte que se tiene que crer uno por modelo, o uno por ciclo o poraccion.

En lo personal es comodo hacerlo por modelo
- Book new
- author new


A veces dependede las acciones que uno quiera realizar, las acciones que se tienen expeustas 


Controler por modelo.

en la carpeta de controlers se tiene uno de ejemplo.

Viene con la instalacion basica.

1. Creamos
    BookController.php

El nombre del archivo tenga el mismo nombre de la clase, la clase se llame generamlmente es el nombre del modelo, camel case controller    


<?php

namespace app\controllers;

use yii\web\Controller;

class BookController extends controller {
    public function actionAll(){
        return 1;
    }
}

2. Necesitamos prendel el servidor web

3. Verificamos las variables de entorno

    echo $db_host

5. source local/cARGAMOS LAS VARIABLES LOCALES AL entorno

    source local/variables_local.sh


6. Encendemos el Servidor web en local
      php yii serve --port=8080

7. Verificar en el browser      
    http://localhost:8080/

    Esto pintara un entorno de yii


que pasa si por ejemplo cARGAMOS
    http://localhost:8080/index.php?r=book

Es un error, ya se esta viendo con un error, con un error 404, not gfound

Estamos abriendo el index con una pariable en la varieble r cargando el controlador All
entonces cargamos ese metodo 

    http://localhost:8080/index.php?r=book/all

Le eestamos mandando la ruta que debe devolver. 

Pero lo que quiero es todos los libros, necesitamso traer 

public function actionAll(){
        $books = Book::find()->all();
        return serialize($books);
    }

Este metodo devuelve stirngs para poder convertir un arreglo en string


en el navegador

http://localhost:8080/index.php?r=book/all


Aca tuvimos un problema que solucionamos cargando las variables en entorno de desarrollo


Aca el arreglo de objetos que devuelve de los libros, serializado en un formatp php serialize, un array que tiene 215 elementos.

objeto 0 que tiene 15 elementos, se tiene un string de 7 carcateries que es book_id, un enteo 2 title.

Esto es ya es información nuestra de la Bd con 2 lineas

Todo el mecanismo que es
La conexion a la bd, la busqueda, el query, y demas yii lo hace por nosotros d emanera eficiente.

Por ejemplo podremos despues vucar con un termino, algo en el titulo.


Continuamos en elcontrolador y creamos u nuevo metodo.

 public function actionDetail($id){
        $book = Book::findOne($id);

        if(empty($book)){
            //TODO: Error
            return "Libro no encontrado";
        }
        return $book->title;
    }


Aca si existe el libro regresamos el libro con su titulo.

Recibo un ID busco un libro con ese id y si no existe mandara un error.

Regreso el titulo


En el browser;

    http://localhost:8080/index.php?r=book/detail&id=5



Esto significa ejecuta la ruta book/detail y de ahi manda el parametro id=5

Tenemos ellibro numero 5 es 
    inumerancy

Podemos hacerlo en nuestro bd pero como tenemso ya creada nuestrso controladores de comando entonces:


$ php yii klvst3r/book 5

Devolviendo:
    (5) inumerancy - John Allen Paulos


Estamos en lo correcto y tenemos una forma de invocar y mandarle por paratetros controlador accion y variables.

Algo mas que comentar es:

que pasa si ponemos un id que no existe por ejemplo


http://localhost:8080/index.php?r=book/detail&id=5555


La respuesta es
    Libro no encontrado

Los tratamiento de errores de veran posteriormente


El controlador junta todo lo que tenemos con nuestras ideas para presentarlas de manera clara al usuario.


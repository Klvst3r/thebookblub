Relaciones de uno a muchos en Yii: Obtener libros de un autor

Resumen
¿Cómo establecer una relación entre un autor y sus libros?

En el mundo del desarrollo web, establecer relaciones entre distintos modelos es fundamental para crear aplicaciones robustas y eficientes. Un reto común es vincular autores con sus respectivos libros. Utilizando frameworks como Yii, este proceso puede simplificarse considerablemente al emplear métodos de relaciones. Pero, ¿cómo se hace? Analicemos cómo podemos, no solo representar estas relaciones, sino también visualizar esos vínculos claramente.
¿Qué métodos de relación se utilizan en Yii?

Cuando trabajamos con modelos en Yii, tenemos varias opciones para establecer relaciones. Uno de los más utilizados para vincular un autor con sus libros es el método hasMany(). Este método resulta esencial cuando un autor puede tener múltiples libros:

public function getBooks()
{
    return $this->hasMany(Book::class, ['authorId' => 'authorId']);
}

    hasMany(): Este método indica la relación de uno a muchos, donde un autor puede haber escrito múltiples libros. Se especifica que el authorId del modelo Book se relaciona con el authorId del modelo de Author.

¿Cómo mostramos en pantalla los libros de un autor?

Una vez establecida la relación, podemos visualizarlos de manera sencilla. Queremos que al imprimir un autor, se muestre no solo su nombre, sino también la cantidad de libros que ha escrito. Esto se logra extendiendo el método toString en la clase de Author:

public function __toString()
{
    return sprintf('%s (%d)', $this->name, count($this->books));
}

Este enfoque hace uso del método count() sobre el arreglo de libros del autor, mostrando claramente cuántos libros posee.
¿Cómo accedemos a propiedades inexistentes en la base de datos?

Uno de los aspectos más fascinantes de Yii es su capacidad de manejar propiedades que no están presentes físicamente en la base de datos. Esto se logra mediante el uso de los getters, permitiendo obtener y generar propiedades en tiempo real. Por ejemplo, si quisiéramos representar una bandera basada en la nacionalidad, podríamos utilizar un método como el siguiente:

public function getFlag()
{
    return 'flags/' . $this->nationality . '.png';
}

Llamar this->flag es equivalente a invocar this->getFlag(), haciendo que la propiedad parezca parte natural del objeto.
¿Cómo mostramos todos los libros de un autor?

Para imprimir en la terminal los títulos de cada libro de un autor específico, la lógica de Yii nos permite recorrer fácilmente la relación:

foreach ($author->books as $book) {
    printf(" - %s\n", $book->title);
}

Este ciclo itera sobre cada libro asociado al autor y muestra su título en pantalla, ejemplificando una práctica común de visualización de datos.
¿Qué más podemos hacer con estas relaciones?

Con estas herramientas, podemos no solo listar los libros de un autor, sino también realizar búsquedas avanzadas, como aquellos con ciertas características o que no estén prestados. La capacidad de construir estas relaciones en nuestros modelos es esencial para capturar, procesar y presentar datos de manera efectiva.

Las relaciones entre modelos son clave para desarrollar aplicaciones que escalen y se adapten a nuestros requerimientos. A medida que te adentras más en este mundo, recuerda que cada relación que creas es una pieza crucial para armar un sistema de datos coherente y enriquecedor para tus usuarios.



Referencias:

https://www.yiiframework.com/doc/guide/2.0/es/db-active-record#relational-data


Comentarios:

// Ajaa moment ! En php el tema de los setters y los getters
// en otro framework a esto se le llama mutators.

class Author extends ActiveRecord {

    /*
    |--------------------------------------------------------------------------
    | GLOBAL VARIABLES
    |--------------------------------------------------------------------------
    */
	public static function tableName()
	{
		return 'authors';
	}

	public function getId()
	{
		return $this->id;
	}

    /*
    |--------------------------------------------------------------------------
    | FUNCTIONS
    |--------------------------------------------------------------------------
    */

	public function toString()
	{
		return sprintf("%s (%s)", $this->name, count($this->books));
	}

    /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    */

	public function getBooks()
	{
		return $this
			->hasMany(Book::class, ['author_id' => 'id']) // esta es la relacion book.author_id / author.id
			->all();
    }

    /*
    |--------------------------------------------------------------------------
    | MUTATORS
    |--------------------------------------------------------------------------
    */

	public function getFlag()
	{
		return sprintf("flags/%s.png", $this->name, $this->nationality);
	}

}




Procedimiento:

Ya tenemos la relación entre libro y autor, ahora hagamos el proceso contrario, autor cuantos libros tiene

Es lo mismo solo que en lugar de un hasone sera con un has hasMany
Para eso 

en el modelo Author.php

----

public function getBooks(){
      return $this
         ->hasMany(Book::class, ['author_id' => 'author_id'])
         ->all();
     }

Pedimos que traiga todos, yo soy un autor entonces this has many traeme todos los que sean un objeto tipo libro instancialos como un objetio libro, 

Que coincida esta llave author_id que es el id de esa tabla y d ela mia y traelos alineados en un arreglo

Que s esto

Ahora tengo que el autor tiene dos libros

Veamos que pasa si  al autor le hacemos un:


public function toString(){
      return sprintf("%s (%s", $this->name, count($this->books));
     }


quiero que me regrese el nombre con el numero de libros que tiene.

Que sea el nombre con un entero con el numero de libros que tiene.

ahora nuestro controller

klvst3rController cuando le decimos actionAuthor($author_id)

En vez de imprimir nombre vamos a imprimir lo siguiente

  public function actionAuthor($author_id) {
        // $author = Author::find()->where(['author_id' => $author_id])->one();
  
        $author = Author::findOne($author_id);
        if(empty($author)){
          printf("No existe el author\n");
          return ExitCode::DATAERR;
        }
        printf("%s\n", $author->toString());
        return ExitCode::OK;
      }
en la terminal
 ejecutamos
    $ php yii klvst3r/author 88      



Ok nos devuelve una salida correcta:

    Alessandro Baricco (3)


 Al ver esto es realmente sencillo es invreiblemente potente. Por ejemplo habiamos solicitado que trajera los libros que trajertan cubierta verde.

 O lis libros que trajerar pagina impar.

 Podemos inventaros cualquier escenarios.

 Trame todos los libros que estan en esta bibliotea de este author pero que estan en las repisas, es decir que no esten prestados.


 Asi se puede ir construyendo relaciones de datos para generar toda esta informacion. que queremos:

 - Presentar 
 - Procesar
 - Capturar
 - Generar

 Con esto las relaciones son elementales.

 Regreando al parentesis anterior 


 Podemos ver que en  la funcion de nuestro modelo Author.php

 Donde en la Clase Author,

 si consultamos en la bd:

  desc authors;
+-------------+------------------+------+-----+---------+----------------+
| Field       | Type             | Null | Key | Default | Extra          |
+-------------+------------------+------+-----+---------+----------------+
| author_id   | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| name        | varchar(100)     | NO   |     | NULL    |                |
| nationality | varchar(2)       | YES  |     | NULL    |                |
+-------------+------------------+------+-----+---------+----------------+


Nos damos cuenta que no tenemos ningun campos que sea books, lo mas cercano que tenemos a eso es qla funcion:

public function getBooks(){
      return $this
         ->hasMany(Book::class, ['author_id' => 'author_id'])
         ->all();
     }

Aca entontramos una magia de yii, es el get property cada vez que yo en un modelo escribo,

getX

por ejemplo
getNationality

getFlag,

tenemos entonces que definir algo como

public function getFlag(){
      return sprintf("flags/%s.png", $this->nationality);
  }



Lo que tenemos es que tenemos una funcion flag que no me trae nada de la bd, uiiza algo de la bd pero no va por ahi, se puede invocar en cualquier otro lugar que es exactamente lo mismo


//$this->flag === $this->getFlag()


Es decir que puedo traer como una propiedad como u atributo, cualquier cosa que tenga un getter.

Es decir si tengo getFlag ya es un atributo aunqueno este en la bd, por ende es una propiedad pero puedo utilizarlo.

Regrando y borrando este segemento del cogio en el modelo



  public function getFlag(){
      return sprintf("flags/%s.png", $this->nationality);
  }

  //$this->flag === $this->getFlag()



Pero podemos ver que en la linea.

 public function toString(){
      return sprintf("%s (%s)", $this->name, count($this->books));
     }


Estamos haciendo el conteo del arreglo que se llama $this->books

Es cecir seria exactamente lo mismo que esto:

    return sprintf("%s (%s)", $this->name, count($this->getBooks()));


Ahora se tiene considerado l aprimera forma donde es un atributo.

En book podriamos cambiar la siguientes lineas.

$this->getAuthor()->name,


Podemos cambarlo por:

    $this->author->name,

Que hace exatamente lo mismo que es una funcion ahora que se convierte en atributo, para ello hay que definirlo


ejemploejecutamos


    $ php yii klvst3r/author 88

Asi entonce en el controladore Klvst3rController definimos nuestro metodo

public function actionBook($book_id){
        $book = Book::findOne($book_id);
        
        if (empty($book)) {
            printf("No existe el libro\n");
            return ExitCode::DATAERR;
        }
    
        // Mostrar información del libro
        printf("%s\n", $book->toString());
        return ExitCode::OK;
    }

En el modelo Book tenemos el metodo ToString para visualizar la información
public function toString() {
    return sprintf("(%d) %s - %s", 
        $this->id, 
        $this->title,
        $this->author ? $this->author->name : 'Autor desconocido'
    );
}


Esto es una tribunto o una funcion que se convierte en atributo

Todo funciona increible cambiando 

//$this->getAuthor()->name,

por
$this->author->name


Como ultima parte vamos a entender cuales son los libros d eun autor.

si nos vamos al controladore

vamos a ser graficos de como traemos información de manera grafica y eficientes y util.

Por ello vamos a imprimir que no solo qe tenga tres libros cierto autor, sino imrpimir cuales son los titulos de este libro.


Para ello en nuestro controladore
modificamos


printf("%s\n", $author->toString());


printf("%s\n", $author->toString());
        foreach($author->books as $book){
          printf(" - %s\n", $book->toString());
        }
        return ExitCode::OK;

Con esto lo que hacemos es traernos los libros que ya estan en el objeto instanciado de author, ya estan ahi referenciados y los imprimo

Ahora ejecutamos:

 ⚡klvst3r ❯❯ php yii klvst3r/author 88
Alessandro Baricco (3)
 - (117) La Esposa joven - Alessandro Baricco
 - (210) Seda - Alessandro Baricco
 - (211) Océano mar - Alessandro Baricco


Podemos mejorar el formato

printf("%s:\n", $author->toString());

volvemos a ejecutar y nos da la siguiente salida:

$  php yii klvst3r/author 12

Jack London (3):
 - (16) El combate del siglo - Jack London
 - (17) White Fang - Jack London
 - (107) La llamada de lo salvaje - Jack London


Estamos trabajando en linea de comando auqneu toda esta magia se puede exportar de manera sencilla a web, agragando una vista html, que se entienda y si se hace una api con una aplicacion de front end es cssi tan sencillo siempre y cando se entiendan los conceptos

Por ello el modelo es el corazon de nuetra aplicaciṕon, los datos y las relaciones entre ellos, que nos funcionaran para hacer crecer nuestra aplicaciṕon hacia donde queramos.

Podemos relacionar dos objetos cualesquiera.

